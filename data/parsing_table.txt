FACTOR num num 
TERM' relop \L 
TERM' addop \L 
FACTOR ( ( EXPRESSION ) 
TERM' ; \L 
TERM' ) \L 
SIMPLE_EXPRESSION' relop \L 
SIMPLE_EXPRESSION' addop addop TERM SIMPLE_EXPRESSION' 
SIMPLE_EXPRESSION id TERM SIMPLE_EXPRESSION' 
SIMPLE_EXPRESSION ( TERM SIMPLE_EXPRESSION' 
EXPRESSION' ; \L 
SIGN + + 
TERM' mulop mulop FACTOR TERM' 
EXPRESSION' ) \L 
SIMPLE_EXPRESSION' ; \L 
EXPRESSION num SIMPLE_EXPRESSION EXPRESSION' 
FACTOR id id 
EXPRESSION id SIMPLE_EXPRESSION EXPRESSION' 
STATEMENT_LIST' if STATEMENT STATEMENT_LIST' 
STATEMENT_LIST' float STATEMENT STATEMENT_LIST' 
TERM num FACTOR TERM' 
STATEMENT_LIST while STATEMENT STATEMENT_LIST' 
STATEMENT_LIST if STATEMENT STATEMENT_LIST' 
STATEMENT int DECLARATION 
TERM ( FACTOR TERM' 
STATEMENT_LIST id STATEMENT STATEMENT_LIST' 
METHOD_BODY while STATEMENT_LIST 
SIGN - - 
SIMPLE_EXPRESSION num TERM SIMPLE_EXPRESSION' 
STATEMENT_LIST float STATEMENT STATEMENT_LIST' 
TERM id FACTOR TERM' 
METHOD_BODY if STATEMENT_LIST 
STATEMENT_LIST' id STATEMENT STATEMENT_LIST' 
STATEMENT_LIST int STATEMENT STATEMENT_LIST' 
STATEMENT if IF 
STATEMENT id ASSIGNMENT 
DECLARATION int PRIMITIVE_TYPE id ; 
EXPRESSION' relop relop SIMPLE_EXPRESSION 
EXPRESSION ( SIMPLE_EXPRESSION EXPRESSION' 
STATEMENT_LIST' while STATEMENT STATEMENT_LIST' 
STATEMENT_LIST' $ \L 
METHOD_BODY id STATEMENT_LIST 
METHOD_BODY float STATEMENT_LIST 
STATEMENT float DECLARATION 
METHOD_BODY int STATEMENT_LIST 
STATEMENT while WHILE 
STATEMENT_LIST' int STATEMENT STATEMENT_LIST' 
DECLARATION float PRIMITIVE_TYPE id ; 
WHILE while while ( EXPRESSION ) { STATEMENT } 
ASSIGNMENT id id = EXPRESSION ; 
PRIMITIVE_TYPE float float 
SIMPLE_EXPRESSION' ) \L 
PRIMITIVE_TYPE int int 
IF if if ( EXPRESSION ) { STATEMENT } else { STATEMENT } 
